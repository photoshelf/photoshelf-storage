// Code generated by MockGen. DO NOT EDIT.
// Source: domain/model/photo/repository.go

// Package mock_photo is a generated GoMock package.
package mock_photo

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/photoshelf/photoshelf-storage/domain/model/photo"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockRepository) Save(photograph photo.Photo) (*photo.Identifier, error) {
	ret := m.ctrl.Call(m, "Save", photograph)
	ret0, _ := ret[0].(*photo.Identifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockRepositoryMockRecorder) Save(photo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), photo)
}

// Read mocks base method
func (m *MockRepository) Read(id photo.Identifier) (*photo.Photo, error) {
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(*photo.Photo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockRepositoryMockRecorder) Read(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read), id)
}

// Delete mocks base method
func (m *MockRepository) Delete(id photo.Identifier) error {
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}
