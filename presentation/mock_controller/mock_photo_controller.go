// Code generated by MockGen. DO NOT EDIT.
// Source: presentation/controller/photo_controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockPhotoController is a mock of PhotoController interface
type MockPhotoController struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoControllerMockRecorder
}

// MockPhotoControllerMockRecorder is the mock recorder for MockPhotoController
type MockPhotoControllerMockRecorder struct {
	mock *MockPhotoController
}

// NewMockPhotoController creates a new mock instance
func NewMockPhotoController(ctrl *gomock.Controller) *MockPhotoController {
	mock := &MockPhotoController{ctrl: ctrl}
	mock.recorder = &MockPhotoControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPhotoController) EXPECT() *MockPhotoControllerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPhotoController) Get(c echo.Context) error {
	ret := m.ctrl.Call(m, "Get", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPhotoControllerMockRecorder) Get(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPhotoController)(nil).Get), c)
}

// Post mocks base method
func (m *MockPhotoController) Post(c echo.Context) error {
	ret := m.ctrl.Call(m, "Post", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post
func (mr *MockPhotoControllerMockRecorder) Post(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockPhotoController)(nil).Post), c)
}

// Put mocks base method
func (m *MockPhotoController) Put(c echo.Context) error {
	ret := m.ctrl.Call(m, "Put", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockPhotoControllerMockRecorder) Put(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPhotoController)(nil).Put), c)
}

// Delete mocks base method
func (m *MockPhotoController) Delete(c echo.Context) error {
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPhotoControllerMockRecorder) Delete(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPhotoController)(nil).Delete), c)
}
